generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
  engineType = "client"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPermission {
  Admin
  UploadFiles
  TakeNotes
}

enum BackupRestoreState {
  Extracting
  DeletingPreviousData
  RestoringData
}

model User {
  id                 String              @id @unique @default(uuid())
  username           String              @unique
  password           String
  avatar             String?
  permissions        UserPermission[]
  files              File[]
  notes              Note[]
  folders            Folder[]
  sessions           Session[]
  logs               Log[]
  totpEnabled        Boolean             @default(false)
  totpSecret         String?
  superAdmin         Boolean             @default(false)
  limits             Json                @default("{}")
  embed              Json                @default("{}")
  createdAt          DateTime            @default(now())
  domains            String[]
  backupRestoreState BackupRestoreState?
  theme              String              @default("Fileship")
  credentials        Credential[]
}

model Credential {
  id         String   @id @unique
  name       String   @default("Untitled")
  publicKey  String
  counter    Int
  transports String[]
  backedUp   Boolean
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model File {
  id        String    @id @unique @default(uuid())
  fileName  String    @unique
  mimeType  String
  size      BigInt
  maxViews  Int       @default(0)
  expiresAt DateTime?
  password  String?
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  folder    Folder?   @relation(fields: [folderId], references: [id])
  folderId  String?
  views     View[]
  embedding Json?
}

model Note {
  id        String   @id @unique @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Folder {
  id        String   @id @unique @default(uuid())
  name      String
  public    Boolean
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  files     File[]
}

model Log {
  id        String   @id @unique @default(uuid())
  action    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  message   String
  ip        String
  system    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model View {
  id        String   @id @unique @default(uuid())
  ip        String
  createdAt DateTime @default(now())
  file      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}

model Session {
  id         String    @id @unique @default(uuid())
  privateId  String    @unique
  ip         String
  os         String
  platform   String
  location   String
  lastSeen   DateTime  @default(now())
  lastVerify DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
}

model Stat {
  id                String   @id @unique @default(uuid())
  users             Int
  storageUsed       BigInt
  storageUsedByUser Json
  views             Json
  viewsByUser       Json
  files             Int
  filesByUser       Json
  types             Json
  createdAt         DateTime @default(now())
}
